@{

    ViewData["Title"] = "我的評論";
    string customerName = String.IsNullOrEmpty(ViewBag.customer.CustomerNickName) ? ViewBag.customer.CustomerName : ViewBag.customer.CustomerNickName;

}
<div class="container-fluid mt-3  h-100">

    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="ms-5 breadcrumb">
            <li class="breadcrumb-item active text-dark">會員中心</li>
            <li class="breadcrumb-item active text-info" aria-current="page">我的評論</li>
        </ol>
    </nav>
    <div class="container container-lg mb-3  h-100">
        <h4 class="text-dark">我的評論</h4>

        @if(Model.Count != 0)
        {
            <!-- 評論內容 -->
            @foreach (var review in Model)
            {
                double starRange = (Math.Round(review.ReviewRating, 1) / 5 * 100);
                string reviewTime = review.ReviewTime;
                string StoreReplyTime = review.StoreReplyTime;
                string StoreReplyContent = String.IsNullOrEmpty(review.StoreReplyContent) ? "該店家尚未回覆您的評論" : review.StoreReplyContent;
                string ReviewContent = String.IsNullOrEmpty(review.ReviewContent) ? "您沒有留下任何評論" : review.ReviewContent;
                string storeImage = String.IsNullOrEmpty(review.StoreImage) ? "image/Common/300x300_default.png" : review.StoreImage;
                int count = 0;

                <div class="container container-lg border-bottom  border-dark w-75  mb-3" id="review-@review.ReviewId">

                    <div class="row">
                        <div class="col-12 col-lg-4">
                            <img class="card-img-top user-center-image mb-2" src="~/@storeImage" alt="@(review.StoreName+"_picture")">
                        </div>
                        <div class="col-12 col-lg-8 row">

                            <div class="col-12 d-flex justify-content-center">
                                <h5 class="fa-solid ">@(review.StoreName)</h5>
                            </div>
                            <div class="col-12 d-flex justify-content-center">
                                <dl>
                                    <div class="d-flex flex-row ">
                                        <div class="home-store-star ms-2" style="background: linear-gradient(to right , #FFD700 0 @(starRange.ToString()+"%"), #F1F0CC @(starRange.ToString()+"%") 100%)"></div>
                                        <dd class="fs-6 ms-2 pt-1 ">@(review.ReviewRating + "顆星")</dd>
                                    </div>
                                </dl>
                            </div>


                            <div class="col-12">

                                <dl>
                                    <div class="d-flex justify-content-between">

                                        <dt>評論內容:</dt>
                                        <dd>@review.ReviewTime</dd>
                                    </div>
                                    <div class="p-2 ms-auto">
                                        <dd class="text-break">@ReviewContent</dd>
                                    </div>

                                    <div class="d-flex justify-content-between">

                                        <dt>店家回覆:</dt>
                                        <dd>@StoreReplyTime</dd>
                                    </div>
                                    <div class="p-2">
                                        <dd class="text-break">@StoreReplyContent</dd>
                                    </div>

                                </dl>


                            </div>

                            @* <div class="col-12">
                    <dl>
                    <dt>品項:</dt>
                    <div class="p-3" id="@review.ReviewId">
                    @for (int i = 0; i < ViewBag.products.Count; i++)
                    {
                    var product = ViewBag.products[i];
                    if (review.ReviewId != product.ReviewId) continue;
                    count++;
                    <dd class="@(count>3?"visually-hidden":"")">@($"{product.ProductName} * {product.Quantity}")</dd>
                    if (count == 4)
                    {
                    <dd><a class="bg-primary fs-6 link-info" href="#" onclick="showProducts(@review.ReviewId)">更多</a></dd>
                    }
                    }
                    </div>
                    </dl>
                    </div> *@

                        </div>
                    </div>

                </div>
            }
        }
        else
        {

            <div class="container container-lg my-3  w-75  border-bottom border-dark pb-3">
                <div class="container-lg container row  ">


                    <div class="col-12  d-flex justify-content-center">
                        <p class="text-break">
                            親愛的顧客 <span class="text-info">@(customerName)</span>  您目前沒有留下任何評論，馬上前往
                            <a href="/HistoricalOrders" class="text-info">歷史訂單</a>
                            留下您的第一則評論吧！
                        </p>
                    </div>
                    <div class="col-3 col-lg-4 mb-3 "></div>
                    <div class="col-6 col-lg-4 mb-3">
                        <a href="/">
                            <img class="card-img-top bg-dark" src="~/image/logo/logo_150x150.png" alt="logo-picture">
                        </a>
                    </div>
                    <div class="col-3 col-lg-4 mb-3 "></div>
                </div>
            </div>
        }
      
    </div>


</div>
@section Scripts {
<script src="https://cdn.jsdelivr.net/npm/throttle-debounce@5.0.0/umd/index.min.js"></script>
<script>
    function showProducts(id) 
    {
        event.preventDefault();
        $(`#${id}>dd`).removeClass("visually-hidden");
        $(`#${id}>dd>a`).remove();
    }

    const DIRECTION_ENUM = {
        DOWN: "down",
        UP: "up",
    };

    // 距离顶部或底部的阈值
    const threshold = 20;

    // 记录前一个滚动位置
    let beforeScrollTop = 0;

    function handleScroll() {
        // 距顶部
        var scrollTop =
            document.documentElement.scrollTop || document.body.scrollTop;
        // 可视区高度
        var clientHeight =
            document.documentElement.clientHeight || document.body.clientHeight;
        // 滚动条总高度
        var scrollHeight =
            document.documentElement.scrollHeight || document.body.scrollHeight;

        // 打印数值
        console.table([
            {
                label: "距顶部",
                value: scrollTop,
            },
            {
                label: "可视区高度",
                value: clientHeight,
            },
            {
                label: "滚动条总高度",
                value: scrollHeight,
            },
            {
                label: "距顶部 + 可视区高度",
                value: scrollTop + clientHeight,
            },
        ]);

        // 确定滚动方向
        let direction = DIRECTION_ENUM.DOWN;
        if (beforeScrollTop > scrollTop) {
            direction = DIRECTION_ENUM.UP;
        }

        // 通过滚动方向判断是触底还是触顶
        if (direction == DIRECTION_ENUM.DOWN) {
            // 滚动触底
            if (scrollTop + clientHeight + threshold >= scrollHeight) {
                console.log("滚动触底");
            }
        } else {
            // 滚动到顶部
            if (scrollTop <= threshold) {
                console.log("滚动到顶部");
            }
        }

        beforeScrollTop = scrollTop;
    }

    // 滚动节流
    const throttleHandleScroll = throttleDebounce.throttle(
        1000,
        handleScroll
    );

    // 监听滚动
    window.addEventListener('scroll', throttleHandleScroll);

</script>
}