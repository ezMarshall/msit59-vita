@{
	ViewData["Title"] = "LinePay付款";
	var paymentInfo = ViewBag.PaymentInfo;
}


<section class="container-lg">

	
	<div class="order mt-3 row mb-3">

		<div class="order-step mx-auto col-md-8 d-flex justify-content-around mb-4">

			<div class="step active col-2 text-center fw-bold ">
				<div class="circle d-inline-block mb-1 rounded-circle">1</div>
				<div class="fs-6 fw-bold text-break">LINE PAY 登入授權</div>
			</div>
			<div class="step active col-2 text-center fw-bold ">
				<div class="circle d-inline-block mb-1 rounded-circle">2</div>
				<div class="fs-6 fw-bold text-break">LINE PAY 確認付款</div>
			</div>
		</div>
		<div class="order-form row bg-white rounded-2 col-9 mx-auto pt-4 px-5 mb-3">
			<div class="row d-flex justify-content-center py-4">
				<div class="col-md-8">
					<div class="fs-5">
						<dl class="row">
							<dt class="col-sm-4 fw-bold fs-3 text-end">訂購門市:</dt>
							<dd class="col-sm-8  fs-3 text-center" id="store-name">@paymentInfo[0].StoreName</dd>
							<hr>
							@foreach (var item in paymentInfo)
							{

								<div class="col-sm-12"><img class="card-img-top line-pay-image" src="~/@(String.IsNullOrEmpty(item.ProductImage) ? "image/Common/300x300_default.png" : item.ProductImage)" alt="@(item.ProductName)_picture" /></div>
								<dt class="col-sm-4 fw-bold">商品名稱</dt>
								<dd class="col-sm-8">@item.ProductName</dd>
								<dt class="col-sm-4 fw-bold">商品單價</dt>
								<dd class="col-sm-8">$@((int)item.ProductUnitPrice)</dd>
								<dt class="col-sm-4 fw-bold">購買數量</dt>
								<dd class="col-sm-8">@item.ShoppingCartQuantity</dd>
								<dt class="col-sm-4 fw-bold">小計</dt>
								<dd class="col-sm-8">$@((int)item.ProductUnitPrice * item.ShoppingCartQuantity)</dd>
								<hr>
							}
								<dt class="col-sm-4 fw-bold fs-3 text-end">應付金額:</dt>
								<dd class="col-sm-8 fs-3 text-start">$@ViewBag.TotalAmount</dd>
								<dt class="col-sm-4 fw-bold fs-3 text-end">交易狀態:</dt>
								<dd class="col-sm-8 fs-3 text-start" id="paymentStatus"> 交易已授權，等待確認</dd>
						</dl>
					</div>
				</div>
			</div>
		</div>

		<div class="row mb-3 mx-auto ">
			<button id="confirm-order" class="btn-next btn btn-dark fs-5 fw-bold" onclick="confirmPayment('@(ViewBag.transactionId)','@(ViewBag.orderId)')" type="button">
				<p class="text-decoration-none text-white my-auto">確認付款</p>
			</button>
		</div>
	</div>

</section>
 
@section Scripts {
	<script>
		let baseLoginPayUrl = '/api/LinePay/';
		let transactionId = "2024060602134460110";
		let orderId = "1717601209796";
		//建立訂單,取得訂單編號
		async function initOrder() {
			const url = '/OrderDetail/ConfirmOrder'
			try {
				return  await fetch(url,
				{
					method: 'POST',

				})
				.then(res => res.json())
				.then(data => data);				
			} catch(err) {
				return new Error("建立訂單失敗");
			}
		}

		async function initTransactionRecord(OrderId,TransactionId,TransactionType,Timestamp,TransactionResult) {
			const url = "/Transaction/InitTransactionRecord";
			//用表單方式傳資料
			const formData = new FormData();
			formData.append('OrderId', OrderId); 
			formData.append('TransactionId', TransactionId);
			formData.append('TransactionType', TransactionType);
			formData.append('Timestamp', Timestamp);
			formData.append('TransactionResult', TransactionId);
			try {
				return await fetch(url,
					{
						method: "POST",
						body: formData
					})
					.then(res => res.json())
					.then(data => data)
			} catch (err) {
				console.error(err);
				return new Error("建立交易紀錄失敗");
			}
		}
		async function confirmLinePay(transactionId, orderId) {
			payment = {
				amount: @(ViewBag.TotalAmount),
				currency: "TWD",
			};
			const url = baseLoginPayUrl + `Confirm?transactionId=${transactionId}&orderId=${orderId}`;
			return await fetch(url, {
				method:"POST",
				body: JSON.stringify(payment),
				headers: {
				"Content-Type": "application/json",
				}
			}).then(res => res.json())
			.then(data=>data)
			.catch(err => {
				console.log("[err]");
				console.log(err);
				return new Error("LinePay交易失敗");
			})
		}



		/* 進行第三方交易 並 記錄交易資料
		 * 授權成功 
		 * 建立order
		 * 取得正確orderId
		 * 建立transactionRecords
		 * 
		 *  
		 */
		
		async function confirmPayment(transactionId, orderId){

			// 進行授權
			const resultLinePay = await confirmLinePay(transactionId, orderId);
			// LinePay授權失敗
			if (resultLinePay instanceof Error || resultLinePay.returnCode !== "0000") {
				console.error(resultLinePay);
				$("#paymentStatus").text("失敗");
				return alert("Line Pay 交易失敗,請重新下單");
			}
			const order = await initOrder();
			//訂單建立失敗
			if (order instanceof Error || !order.success) {
				console.error(order);
				return alert("訂單建立失敗,請重新下單");
				//todo取消linePay付款
			}

			
			const transactionRecord = await initTransactionRecord(order.orderId, transactionId, 1, orderId, true);
			// const transactionRecord = await initTransactionRecord(10000492, transactionId, 1, orderId, true);

			if (transactionRecord instanceof Error) {
				console.error(transactionRecord);
				return alert("建立交易紀錄失敗");
				//todo取消linePay付款
			}

			$("#paymentStatus").text("交易完成");

			alert('LinePay 付款完成,即將回到當前訂單頁面');

			connection.invoke("MakeOrders").catch(function (err) {
				return console.error(err.toString());
			});

			setTimeout(() => {
				window.location = "/CurrentOrder";
					}, 2000);
			}


	</script>
}